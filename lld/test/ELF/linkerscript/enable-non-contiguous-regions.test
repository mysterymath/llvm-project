REQUIRES: x86

RUN: split-file %s %t
RUN: llvm-mc -n -filetype=obj -triple=x86_64 %t/spill.s -o %t/spill.o

# Check that an input section spills to a later match if the region of its
# first match would overflow.

RUN: ld.lld -T %t/spill.ld %t/spill.o -o %t/spill.out --enable-non-contiguous-regions
RUN: llvm-readelf -S %t/spill.out | FileCheck %s -check-prefix=SPILL

SPILL:      Name          Type     Address          Off    Size
SPILL:      .first_chance PROGBITS 0000000000000000 001000 000001
SPILL-NEXT: .last_chance  PROGBITS 0000000000000002 001002 000002

# Check that a spill off the end still fails the link.

RUN: not ld.lld -T %t/spill-fail.ld %t/spill.o -o %t/spill-fail.out --enable-non-contiguous-regions 2>&1 |\
RUN:   FileCheck %s -check-prefix=SPILL-FAIL

SPILL-FAIL: error: section '.last_chance' will not fit in region 'b': overflowed by 2 bytes

# Check that the above spill still occurs if the LMA would overflow, even if
# the VMA would fit.

RUN: ld.lld -T %t/spill-lma.ld %t/spill.o -o %t/spill-lma.out --enable-non-contiguous-regions
RUN: llvm-readelf -S %t/spill-lma.out | FileCheck %s -check-prefix=SPILL-LMA

SPILL-LMA:      Name          Type     Address          Off    Size
SPILL-LMA:      .first_chance PROGBITS 0000000000000000 001000 000001
SPILL-LMA-NEXT: .last_chance  PROGBITS 0000000000000003 001003 000002

# Check that a spill can occur to an additional match after the first.

RUN: ld.lld -T %t/spill-later.ld %t/spill.o -o %t/spill-later.out --enable-non-contiguous-regions
RUN: llvm-readelf -S %t/spill-later.out | FileCheck %s -check-prefix=SPILL-LATER

SPILL-LATER:      Name            Type     Address          Off    Size
SPILL-LATER:      .first_chance   PROGBITS 0000000000000000 001000 000001
SPILL-LATER-NEXT: .second_chance  PROGBITS 0000000000000002 001001 000000
SPILL-LATER-NEXT: .last_chance    PROGBITS 0000000000000003 001003 000002

# Check that an additional match in /DISCARD/ has no effect.

RUN: not ld.lld -T %t/no-spill-into-discard.ld %t/spill.o -o %t/no-spill-into-discard.out --enable-non-contiguous-regions 2>&1 |\
RUN:   FileCheck %s -check-prefix=NO-SPILL-INTO-DISCARD

NO-SPILL-INTO-DISCARD: error: section '.osec' will not fit in region 'a': overflowed by 1 bytes

# Check that a later overflow can cause an earlier section to spill.

RUN: ld.lld -T %t/spill-earlier.ld %t/spill.o -o %t/spill-earlier.out --enable-non-contiguous-regions
RUN: llvm-readelf -S %t/spill-earlier.out | FileCheck %s -check-prefix=SPILL-EARLIER

SPILL-EARLIER:      Name          Type     Address          Off    Size
SPILL-EARLIER:      .first_chance PROGBITS 0000000000000000 001000 000002
SPILL-EARLIER-NEXT: .last_chance  PROGBITS 0000000000000002 001002 000001

# Check that an additional match after /DISCARD/ has no effect.

RUN: ld.lld -T %t/no-spill-from-discard.ld %t/spill.o -o %t/no-spill-from-discard.out --enable-non-contiguous-regions
RUN: llvm-readelf -S %t/no-spill-from-discard.out | FileCheck %s -check-prefix=NO-SPILL-FROM-DISCARD

NO-SPILL-FROM-DISCARD: Name          Type     Address          Off    Size
NO-SPILL-FROM-DISCARD-NOT: .osec

# Check that a spill uses the alignment of the later match.

RUN: ld.lld -T %t/spill-align.ld %t/spill.o -o %t/spill-align.out --enable-non-contiguous-regions
RUN: llvm-readelf -S %t/spill-align.out | FileCheck %s -check-prefix=SPILL-ALIGN

SPILL-ALIGN:      Name          Type     Address          Off    Size
SPILL-ALIGN:      .first_chance PROGBITS 0000000000000000 000158 000000
SPILL-ALIGN-NEXT: .last_chance  PROGBITS 0000000000000008 001008 00000a

# Check that SHF_MERGEd sections are spilled according to the matches of the
# first merged input section (the one giving the resulting section its name).

RUN: llvm-mc -n -filetype=obj -triple=x86_64 %t/merge.s -o %t/merge.o
RUN: ld.lld -T %t/spill-merge.ld %t/merge.o -o %t/spill-merge.out --enable-non-contiguous-regions
RUN: llvm-readelf -S %t/spill-merge.out | FileCheck %s -check-prefix=SPILL-MERGE

SPILL-MERGE:      Name          Type     Address          Off    Size
SPILL-MERGE:      .first  PROGBITS 0000000000000000 000190 000000
SPILL-MERGE-NEXT: .second PROGBITS 0000000000000001 001001 000002
SPILL-MERGE-NEXT: .third  PROGBITS 0000000000000003 001003 000000

# Check that an error is reported for INSERT

RUN: not ld.lld -T %t/insert.ld %t/spill.o -o %t/insert.out --enable-non-contiguous-regions 2>&1 |\
RUN:   FileCheck %s -check-prefix=INSERT

INSERT: error: INSERT cannot be used with --enable-non-contiguous-regions

#--- spill.s
.section .one_byte_section,"a",@progbits
.fill 1

.section .two_byte_section,"a",@progbits
.fill 2

#--- spill.ld
MEMORY {
  a : ORIGIN = 0, LENGTH = 2
  b : ORIGIN = 2, LENGTH = 2
}

SECTIONS {
  .first_chance : { *(.one_byte_section) *(.two_byte_section) } >a
  .last_chance : { *(.two_byte_section) } >b
}

#--- spill-fail.ld
MEMORY {
  a : ORIGIN = 0, LENGTH = 1
  b : ORIGIN = 2, LENGTH = 0
}

SECTIONS {
  .first_chance : { *(.one_byte_section) *(.two_byte_section) } >a
  .last_chance : { *(.two_byte_section) } >b
}

#--- spill-lma.ld
MEMORY {
  vma_a : ORIGIN = 0, LENGTH = 3
  vma_b : ORIGIN = 3, LENGTH = 3
  lma_a : ORIGIN = 6, LENGTH = 2
  lma_b : ORIGIN = 8, LENGTH = 2
}

SECTIONS {
  .first_chance : { *(.one_byte_section) *(.two_byte_section) } >vma_a AT>lma_a
  .last_chance : { *(.two_byte_section) } >vma_b AT>lma_b
}

#--- spill-later.ld
MEMORY {
  a : ORIGIN = 0, LENGTH = 2
  b : ORIGIN = 2, LENGTH = 1
  c : ORIGIN = 3, LENGTH = 2
}

SECTIONS {
  .first_chance : { *(.one_byte_section) *(.two_byte_section) } >a
  .second_chance : { *(.two_byte_section) } >b
  .last_chance : { *(.two_byte_section) } >c
}

#--- spill-earlier.ld
MEMORY {
  a : ORIGIN = 0, LENGTH = 2
  b : ORIGIN = 2, LENGTH = 1
}

SECTIONS {
  .first_chance : { *(.one_byte_section) *(.two_byte_section) } >a
  .last_chance : { *(.one_byte_section) } >b
}

#--- no-spill-into-discard.ld
MEMORY {
  a : ORIGIN = 0, LENGTH = 1
}

SECTIONS {
  .osec : { *(.two_byte_section) } >a
  /DISCARD/ : { *(.one_byte_section) *(.two_byte_section) }
}

#--- no-spill-from-discard.ld
MEMORY {
  a : ORIGIN = 0, LENGTH = 2
}

SECTIONS {
  /DISCARD/ : { *(.one_byte_section) *(.two_byte_section) }
  .osec : { *(.two_byte_section) } >a
}

#--- spill-align.ld
MEMORY {
  a : ORIGIN = 0, LENGTH = 0
  b : ORIGIN = 2, LENGTH = 16
}

SECTIONS {
  .first_chance : SUBALIGN(1) { *(.two_byte_section) } >a
  .last_chance : SUBALIGN(8) { *(.one_byte_section) *(.two_byte_section) } >b
}

#--- merge.s
.section .a,"aM",@progbits,1
.byte 0x12, 0x34

.section .b,"aM",@progbits,1
.byte 0x12

#--- spill-merge.ld
MEMORY {
  a : ORIGIN = 0, LENGTH = 1
  b : ORIGIN = 1, LENGTH = 2
  c : ORIGIN = 3, LENGTH = 2
}

SECTIONS {
  .first : { *(.a) *(.b) } >a
  .second : { *(.a) } >b
  .third : { *(.b) } >c
}

#--- insert.ld
MEMORY {
  a : ORIGIN = 0, LENGTH = 1
}

SECTIONS {
  .a : { *(.two_byte_section) } >a
}

SECTIONS {
  .b : { *(.one_byte_section) } >a
} INSERT AFTER .a;
